import logging
from aiogram.dispatcher.filters import Command
from aiogram.types import Message, CallbackQuery
from loader import dp, bot
import aioschedule
import asyncio
import keybords.inline.choice_buttons as key
import keybords.inline.callback_datas as call_datas
from bd.sql import *
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import erp

# –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message_handler(Command('start'))
async def show_menu(message: Message):
    text = '''ü§ù –ï—Å–ª–∏ —Ç—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ PR ‚Äî –¥–µ–ª–æ –æ–±—â–µ–µ! 

–ù–∞ 2023 –≥–æ–¥ —É –Ω–∞—Å –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è –º–Ω–æ–≥–æ –∫–ª–∞—Å—Å–Ω—ã—Ö –º–∏—Å—Å–∏–π, –≤—ã–ø–æ–ª–Ω—è—è –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã –≤ —Å–≤–æ—é –∫–æ–ø–∏–ª–∫—É –∏ –æ–±–º–µ–Ω—è—Ç—å –∏—Ö –Ω–∞ –∫—Ä—É—Ç–æ–π –º–µ—Ä—á.'''
    await message.answer(text, reply_markup=key.menu_keyboard)
    response = await erp.get_id_erp(message.from_user.id)
    await create_profile(message.from_user.id, response[0], response[1])

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@dp.callback_query_handler(call_datas.menu_callback.filter(item_menu='next'))
async def helo_key(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    emp = (await sel_emploes(call.message.chat.id))[0][0]
    await call.message.edit_text(f'–¢—ã –≤ –∫–æ–º–∞–Ω–¥–µ, {emp} üòé\n–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –º–∏—Å—Å–∏–π', reply_markup=key.helo_keyboard)
    await call.answer()
    
# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–º–æ—â–∏
@dp.callback_query_handler(call_datas.helo_callback.filter(item_helo='helo'))
async def helo_key(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    await call.message.edit_text(f'–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å–ø–∏—Å–æ–∫ –º–∏—Å—Å–∏–π –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å üíé\n–í—ã–ø–æ–ª–Ω—è–π –∏—Ö –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ, –∞ –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ –±–∞–ª–ª—ã¬ª', reply_markup=key.mission_keyboard)
    await call.answer()

# –ö–Ω–æ–ø–∫–∞ –º–∏—Å—Å–∏–∏
@dp.callback_query_handler(call_datas.mission_callback.filter(item_mission='miss'))
async def mission_key(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    bal = (await check_point(call.message.chat.id))[0][0]
    await call.message.edit_text(f'–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å {bal} üíé')
    await call.answer()

# –ö–Ω–æ–ø–∫–∞ –º–æ–∏ –±–∞–ª–ª—ã
@dp.callback_query_handler(call_datas.mission_callback.filter(item_mission='my_bolls'))
async def my_bolls_key(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    bal = (await check_point(call.message.chat.id))[0][0]
    await call.message.edit_text(f'–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å {bal} üíé', reply_markup=key.back_keyboard)
    await call.answer()

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@dp.callback_query_handler(call_datas.back_callback.filter(item_back='back'))
async def back_key(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    await call.message.edit_text(f'–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å–ø–∏—Å–æ–∫ –º–∏—Å—Å–∏–π –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å üíé\n–í—ã–ø–æ–ª–Ω—è–π –∏—Ö –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ, –∞ –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ –±–∞–ª–ª—ã¬ª', reply_markup=key.mission_keyboard)
    await call.answer()