import logging
from aiogram.dispatcher.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram import types
from loader import dp, bot
from aiogram.dispatcher import FSMContext
import keybords.inline.choice_buttons as key
import keybords.inline.callback_datas as call_datas
from bd.sql import *
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import erp
from aiogram.dispatcher.filters.state import State, StatesGroup

class pictures(StatesGroup):
    photo = State()
    name = State()
    deportament = State()
    mission = State()

class datas(StatesGroup):
    text = State()
    name = State()
    deportament = State()
    mission = State()

# –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message_handler(Command('start'))
async def show_menu(message: Message):
    text = '''ü§ù –ï—Å–ª–∏ —Ç—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ PR ‚Äî –¥–µ–ª–æ –æ–±—â–µ–µ! 

–ù–∞ 2023 –≥–æ–¥ —É –Ω–∞—Å –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è –º–Ω–æ–≥–æ –∫–ª–∞—Å—Å–Ω—ã—Ö –º–∏—Å—Å–∏–π, –≤—ã–ø–æ–ª–Ω—è—è –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã –≤ —Å–≤–æ—é –∫–æ–ø–∏–ª–∫—É –∏ –æ–±–º–µ–Ω—è—Ç—å –∏—Ö –Ω–∞ –∫—Ä—É—Ç–æ–π –º–µ—Ä—á.'''
    await message.answer(text, reply_markup=key.menu_keyboard)
    response = await erp.get_id_erp(message.from_user.id)
    await create_profile(message.from_user.id, response[0], response[1])

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@dp.callback_query_handler(call_datas.menu_callback.filter(item_menu='next'))
async def helo_key(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    emp = (await sel_emploes(call.message.chat.id))[0][0]
    await call.message.edit_text(f'–¢—ã –≤ –∫–æ–º–∞–Ω–¥–µ, {emp} üòé\n–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –º–∏—Å—Å–∏–π', reply_markup=key.helo_keyboard)
    await call.answer()
    
# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–º–æ—â–∏
@dp.callback_query_handler(call_datas.helo_callback.filter(item_helo='helo'))
async def helo_key(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    await call.message.edit_text(f'–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å–ø–∏—Å–æ–∫ –º–∏—Å—Å–∏–π –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å üíé\n–í—ã–ø–æ–ª–Ω—è–π –∏—Ö –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ, –∞ –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ –±–∞–ª–ª—ã¬ª', reply_markup=key.mission_keyboard)
    await call.answer()

# –ö–Ω–æ–ø–∫–∞ –º–∏—Å—Å–∏–∏
@dp.callback_query_handler(call_datas.mission_callback.filter(item_mission='miss'), state=None)
async def mission_key(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    missions = (await get_random_mission())
    await set_last_mission(call.message.chat.id, missions[0][1], call.message.message_id)
    if missions[0][1] == '2':
        await pictures.photo.set()
    else:
        await datas.text.set()
    await call.message.edit_text(str(missions[0][2]).replace('"',''), reply_markup=key.back_keyboard)
    await call.answer()

# –ö–Ω–æ–ø–∫–∞ –º–æ–∏ –±–∞–ª–ª—ã
@dp.callback_query_handler(call_datas.mission_callback.filter(item_mission='my_bolls'))
async def my_bolls_key(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    bal = (await check_point(call.message.chat.id))[0][0]
    await call.message.edit_text(f'–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å {bal} üíé', reply_markup=key.back_keyboard)
    await call.answer()

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@dp.callback_query_handler(call_datas.back_callback.filter(item_back='back'))
async def back_key(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    await call.message.edit_text(f'–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å–ø–∏—Å–æ–∫ –º–∏—Å—Å–∏–π –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å üíé\n–í—ã–ø–æ–ª–Ω—è–π –∏—Ö –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ, –∞ –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ –±–∞–ª–ª—ã¬ª', reply_markup=key.mission_keyboard)
    await call.answer()

@dp.message_handler(lambda message: not message.photo, state=pictures.photo)
async def check_photo(message: types.Message):
    await message.reply('–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ')

@dp.message_handler(content_types=['photo'], state=pictures.photo)
async def load_photo(message: types.Message, state: FSMContext):
    person = (await get_users(message.chat.id))
    mission = (await get_mission(person[0][2]))
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
        data['name'] = person[0][0]
        data['deportament'] = person[0][1]
        data['mission'] = mission[0][2]
    async with state.proxy() as data:
        await bot.send_photo(-1001905922253, data['photo'], f'–ö—Ç–æ –ø—Ä–∏—Å–ª–∞–ª: {data["name"]}\n–ò–∑ –∫–∞–∫–æ–≥–æ –æ—Ç–¥–µ–ª–∞: {data["deportament"]}\n–ù–∞ –∫–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {data["mission"]}')
    await state.finish()
    await up_point(message.chat.id, mission[0][3])
    await message.delete()
    await bot.delete_message(message.from_user.id, person[0][3])
    await message.answer(f'–ö–ª–∞—Å—Å! –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–∏ {mission[0][3]} üíé', reply_markup=key.back_keyboard)

@dp.message_handler(content_types=types.ContentType.ANY, state=datas.text)
async def load_text(message: types.Message, state: FSMContext):
    if message.content_type != 'text':
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
    else:
        person = (await get_users(message.chat.id))
        mission = (await get_mission(person[0][2]))
        async with state.proxy() as data:
            data['text'] = message.text
            data['name'] = person[0][0]
            data['deportament'] = person[0][1]
            data['mission'] = mission[0][2]
        async with state.proxy() as data:
            await bot.send_message(-1001905922253, f'–ö—Ç–æ –ø—Ä–∏—Å–ª–∞–ª: {data["name"]}\n–ò–∑ –∫–∞–∫–æ–≥–æ –æ—Ç–¥–µ–ª–∞: {data["deportament"]}\n–ù–∞ –∫–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {data["mission"]}\n–ù–∞–ø–∏—Å–∞–ª: {message.text}')
        await state.finish()
        await up_point(message.chat.id, mission[0][3])
        await message.delete()
        await bot.delete_message(message.from_user.id, person[0][3])
        await message.answer(f'–ö–ª–∞—Å—Å! –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–∏ {mission[0][3]} üíé', reply_markup=key.back_keyboard)

@dp.callback_query_handler(call_datas.back_callback.filter(item_back='back'), state='*')
async def back_key(call: CallbackQuery, callback_data: dict, state: FSMContext):
    logging.info(f'call = {callback_data}')
    await call.message.edit_text(f'–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å–ø–∏—Å–æ–∫ –º–∏—Å—Å–∏–π –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å üíé\n–í—ã–ø–æ–ª–Ω—è–π –∏—Ö –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ, –∞ –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ –±–∞–ª–ª—ã¬ª', reply_markup=key.mission_keyboard)
    await call.answer()
    await state.finish()